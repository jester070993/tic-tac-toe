import pprint
import time 

the_board = {"top-L": " ", "top-M": " ", "top-R": " ",
            "mid-L": " ", "mid-M": " ", "mid-R": " ",
            "low-L": " ", "low-M": " ", "low-R": " ", }

def print_board(board):
    print(board['top-L'] + '|' + board['top-M'] + '|' + board['top-R'])
    print('' + '-' + ' ' + '-' + ' ' + '-' )
    print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])
    print('' + '-' + ' ' + '-' + ' ' + '-' )
    print(board['low-L'] + '|' + board['low-M'] + '|' + board['low-R'])

print("Lets play a game of Tic-Tac-Toe")

picker  = True

while(picker):
    print("Would you like to be X's or O's")
    global player1
    player1 = input()

    global player2
    player2 = ""
    if player1 ==  "x" or player1 == "X":
        player2 = "O"
        picker = False
    elif player1 == "o" or player1 == "O":
        player2 = "X"
        picker = False
    else:
        picker = True

print("Player 1 is " + player1.upper() + ". Player 2 is " + player2 + "...")

#time.sleep(1)

print("The board is clear. Lets begin! Moves are 'top-L','top-M', 'top-R' ")
print("'mid-L','mid-M', 'mid-R'")
print("'low-L','low-M', 'low-R'")
print("\n")

#time.sleep(2)

def ask_move():
    print("What is your move")
    global move
    move = input()

def player1_move(one):
    print("Player 1")
    the_board[one] = player1

def player2_move(two):
    print("Player 2")
    the_board[two] = player2


def check_win(spot, end):
    global win
    win = end
    if the_board["top-L"] == spot and the_board["top-M"] == spot and the_board["top-R"] == spot:
        win = True
    elif the_board["mid-L"]  == spot and the_board["mid-M"] == spot and the_board["mid-R"] == spot:
        win = True
    elif the_board["low-L"]  == spot and the_board["low-M"] == spot and the_board["low-R"] == spot:
        win = True
    elif the_board["low-L"]  == spot and the_board["mid-L"] == spot and the_board["mid-R"] == spot:
        win = True
    elif the_board["low-M"]  == spot and the_board["mid-M"] == spot and the_board["top-M"] == spot:
        win = True
    elif the_board["low-R"]  == spot and the_board["mid-R"] == spot and the_board["top-R"] == spot:
        win = True
    elif the_board["low-R"]  == spot and the_board["mid-M"] == spot and the_board["top-L"] == spot:
        win = True
    elif the_board["low-L"]  == spot and the_board["mid-M"] == spot and the_board["top-R"] == spot:
        win = True

player1 = player1.upper()
    
turn = True
draw = True

for theTurn in range(1,10):
    if turn:
        print("\n")
        print("Player 1's Turn")
        ask_move()
        if player1 in the_board.values():
            print("that space is already taken")
        player1_move(move)
        print_board(the_board)
        turn = False
        check_win(player1, False)
        if win:
            print("Player1 wins!")
            draw = False
            break  
    else:
        print("\n")
        print("Player 2's Turn")
        ask_move()
        player2_move(move)
        print_board(the_board)
        check_win(player2, "Player2")
        turn = True
        check_win(player2, False)
        if win:
            print("Player2 wins!")
            draw = False
            break

if draw:
    print("No one wins! Play again?")
            








#humanMove(theBoard)
    
      
#human is asked for input to be X or O, computer is whatever human didnt
#pick  CHECK

#3 fucntions - computer turn, human turn, check win

# computer turn is generated by random number between 1 and 3 for vertical
# and then 1 thru 3 for hoizontal - (first number being the spot vertically,
#second number being the spot horizontally, aka numbers 1 and 2 would generate
# an O or X in the middle area

#human turn is generated by asking user for input on that turn, then comparing
# that input to the key in theBoard dictionary, if user types in top-R,
#O or X is then placed in that area by giving that key (which the use typed in)
# the value of X or O

#computer then goes and runs function again
# after 5 fucntion calls back and forth (computer, human, computer, human, computer)
# the check win fucntion then runs (does not run prior to 5 turns because
#the minimum amount of turns required to win is 5, regardless of who goes first
#then, after every turn after the first 5 turns, checkWin function is ran 
#meaning, function call would  be something like:

#----sequence of functions----
#computer()
#printBoard(theBoard)
#human()
#printBoard(theBoard)
#computer()
#printBoard(theBoard)
#human()
#printBoard(theBoard)
#computer()
#printBoard(theBoard)
#checkwin
#human()
#printBoard(theBoard)
#checkwin
#computer()
#printBoard(theBoard)
#checkwin
#human()
#printBoard(theBoard)
#checkwin
#computer()
#printBoard(theBoard)
#checkwin
#break/end 

#check win fucntion checks all the possible rows and columns  and diagnal
#ways to win. if the vaules for the keys top-L  top-M  top-R match all match,
# aka all 3 are either all X or all O, that respective player wins
#meaning, there are 8 possible ways to win, so there would be 8 if / elif
#statements. if one of those conditions is true, game loop breaks and
#player wins

#if last checkwin fucntion is ran and no conditions are satified and all
#values for each k have something
#game is a draw and asked if wanted to restart 




